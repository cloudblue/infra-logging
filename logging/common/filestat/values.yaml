nameOverride: ""
fullnameOverride: ""

# DaemonSet or Deployment
kind: "DaemonSet"

# # Only applicable for Deployment
# replicaCount: 1

image:
  repository: "mdoubez/filestat_exporter"
  pullPolicy: "IfNotPresent"
  tag: "0.3.1"

## Optional array of imagePullSecrets containing private registry credentials
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

serviceAccount:
  create: false
  annotations: {}
  name: null

rbac:
  create: false

# Configure podsecuritypolicy
# Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
podSecurityPolicy:
  enabled: false
  annotations: {}

## Security Context policies for controller pods
## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for
## notes on enabling and using sysctls
##
podSecurityContext: {}
  # seLinuxOptions:
  #   type: "spc_t"

securityContext: 
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  runAsUser: 0

# Congigure the livessProbe
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /metrics
    port: metrics
  # initialDelaySeconds: 0
  # periodSeconds: 10
  # timeoutSeconds: 1
  # successThreshold: 1
  # failureThreshold: 3

# Congigure the readinessProbe
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe:
  httpGet:
    path: /metrics
    port: metrics
  # initialDelaySeconds: 0
  # periodSeconds: 10
  # timeoutSeconds: 1
  # successThreshold: 1
  # failureThreshold: 3

resources:
  requests:
    cpu: 100m
    memory: 512Mi
  limits:
    cpu: "1"
    memory: 512Mi

## only available if kind is Deployment
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
  ## see https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/#autoscaling-on-multiple-metrics-and-custom-metrics
  customRules: []
    # - type: Pods
    #   pods:
    #     metric:
    #       name: packets-per-second
    #     target:
    #       type: AverageValue
    #       averageValue: 1k
  ## see https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-configurable-scaling-behavior
  # behavior:
  #   scaleDown:
  #     policies:
  #       - type: Pods
  #         value: 4
  #         periodSeconds: 60
  #       - type: Percent
  #         value: 10
  #         periodSeconds: 60

# priorityClassName: "system-node-critical"

nodeSelector: {}

## Node tolerations for server scheduling to nodes with taints
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
##
tolerations:
  - key: node-role.kubernetes.io/master
    operator: Exists
    effect: NoSchedule
  - key: CriticalAddonsOnly
    operator: Exists
  - operator: Exists
    effect: NoExecute
  - operator: Exists
    effect: NoSchedule
  - operator: Exists
    effect: PreferNoSchedule
  - key: node.kubernetes.io/not-ready
    operator: Exists
    effect: NoExecute
  - key: node.kubernetes.io/unreachable
    operator: Exists
    effect: NoExecute
  - key: node.kubernetes.io/disk-pressure
    operator: Exists
    effect: NoSchedule
  - key: node.kubernetes.io/memory-pressure
    operator: Exists
    effect: NoSchedule
  - key: node.kubernetes.io/pid-pressure
    operator: Exists
    effect: NoSchedule
  - key: node.kubernetes.io/unschedulable
    operator: Exists
    effect: NoSchedule
 

## Affinity and anti-affinity
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Annotations to be added to filestat pods
##
podAnnotations: {}

## Labels to be added to filestat pods
##
podLabels: {}

## Additional environment variables to set for filestat pods
env: []


envFrom: []

args: ["-config.file", "/etc/filestat/filestat.yaml"]

volumes:
- name: mnt
  hostPath:
    path: /mnt 
- name: varlog
  hostPath:
    path: /var/log
- name: varlib
  hostPath:
    path: /var/lib
- name: etcfilestat-main
  configMap:
    name: filestat-main
    defaultMode: 0777

volumeMounts:
- name: mnt
  mountPath: /mnt 
- name: varlog
  mountPath: /var/log
- name: varlib
  mountPath: /var/lib  
- name: etcfilestat-main
  mountPath: /etc/filestat
 

## filestat service
##
service:
  type: "ClusterIP"
  annotations: {}
  ports: []
  # - name: "forwarder"
  #   protocol: TCP
  #   containerPort: 24224

## Prometheus Monitoring
##
metrics:
  serviceMonitor:
    enabled: true
    additionalLabels:
      release: prometheus-operator
    namespace: ""
    namespaceSelector: {}
    ## metric relabel configs to apply to samples before ingestion.
    ##
    metricRelabelings:
    - sourceLabels: [__name__]
      separator: ;
      regex: ^filestat_output_status_buffer_(oldest|newest)_.+
      replacement: $1
      action: drop
    ## relabel configs to apply to samples after ingestion.
    ##
    relabelings: 
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      separator: ;
      regex: ^(.*)$
      targetLabel: nodename
      replacement: $1
      action: replace
    ## Additional serviceMonitor config
    ##
    jobLabel: filestat
    interval: 5s
    scrapeTimeout: 5s
    honorLabels: true

  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    rules: []
    # - alert: filestatDown
    #   expr: up{job="filestat"} == 0
    #   for: 5m
    #   labels:
    #     context: filestat
    #     severity: warning
    #   annotations:
    #     summary: "filestat Down"
    #     description: "{{ $labels.pod }} on {{ $labels.nodename }} is down"
    # - alert: filestatScrapeMissing
    #   expr: absent(up{job="filestat"} == 1)
    #   for: 15m
    #   labels:
    #     context: filestat
    #     severity: warning
    #   annotations:
    #     summary: "filestat Scrape Missing"
    #     description: "filestat instance has disappeared from Prometheus target discovery"

## filestat list of plugins to install
##

## Add filestat config files from K8s configMaps
##
configMapConfigs: []

## filestat configurations:
##
fileConfigs:
  filestat.yaml: |-
    exporter:
      # Optional network parameters
      listen_address: ':9943'
      #metrics_path: /metrics
      working_directory: "/var/log/"
      enable_crc32_metric: false
      enable_nb_line_metric: false
      # list of patterns to apply - metrics can be enable/disabled for each group
      files:
        - patterns: ["/var/log/containers/*.log"]
          enable_crc32_metric: false
          enable_nb_line_metric: true
        - patterns: ["/var/log/pods/*/*/*log"]
          enable_crc32_metric: false
          enable_nb_line_metric: true
        - patterns: ["/var/log/pods/*/*/*gz"]
          enable_crc32_metric: false
          enable_nb_line_metric: false
 